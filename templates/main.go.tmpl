// Code generated by sqlc-connect (https://github.com/walterwanderley/sqlc-connect).

package main

import (
	"context"
	"database/sql"
	"errors"
	"flag"
	"fmt"
	"log"
	"log/slog"
	"os"
	"os/signal"
	"runtime"
	"syscall"

	"go.uber.org/automaxprocs/maxprocs"

	"golang.org/x/net/http2"
  	"golang.org/x/net/http2/h2c"

	// database driver
	{{if eq .Database "mysql"}}_ "github.com/go-sql-driver/mysql"{{else if eq .Database "sqlite"}}_ "github.com/mattn/go-sqlite3"{{else}}{{if eq .SqlPackage "pgx/v5"}}"github.com/jackc/pgx/v5/pgxpool"{{else}}_ "github.com/jackc/pgx/v5/stdlib"{{end}}{{end}}
	{{if .MigrationPath}}{{if eq .SqlPackage "pgx/v5"}}_ "github.com/jackc/pgx/v5/stdlib"{{end}}{{end}}

	{{range .Packages}}app_{{.Package}} "{{ .GoModule}}/{{.SrcPath}}"
	{{end}}
)

{{if .Args}}//go:generate {{ .Args}}{{end}}

const serviceName = "{{ .GoModule}}"

var (
	dbURL          string
	{{if eq .Database "sqlite"}}replicationURL string{{end}}
	port           int
)

func main() {
	var dev bool
	flag.StringVar(&dbURL, "db", "", "The Database connection URL")
	flag.IntVar(&port, "port", 5000, "The server port")
	flag.BoolVar(&dev, "dev", false, "Set logger to development mode")
	{{if eq .Database "sqlite"}}flag.StringVar(&replicationURL, "replication", "", "S3 replication URL"){{end}}
	flag.Parse()

	initLogger(dev)
	
	if err := run(); err != nil && !errors.Is(err, http.ErrServerClosed) {
		slog.Error("server error", "error", err)
		os.Exit(1)
	}
}

func run() error {
	if _, err := maxprocs.Set(); err != nil {
		slog.Warn("startup", "error", err)
	}
	slog.Info("startup", "GOMAXPROCS", runtime.GOMAXPROCS(0))

	{{if eq .SqlPackage "pgx/v5"}}
	db, err := pgxpool.New(context.Background(), dbURL)
	{{else}}
	db, err := sql.Open("{{if eq .Database "mysql"}}mysql{{else if eq .Database "sqlite"}}sqlite3{{else}}pgx{{end}}", dbURL)
	{{end}}if err != nil {
		return err
	}
	defer db.Close()
	{{if eq .Database "sqlite"}}
	if replicationURL != "" {
		slog.Info("replication", "url", replicationURL)
		lsdb, err := replicate(context.Background(), dbURL, replicationURL)
		if err != nil {
			return fmt.Errorf("init replication error: %w", err)
		}
		defer lsdb.Close()
	}
	{{end -}}
	{{if .MigrationPath}}{{if eq .SqlPackage "pgx/v5"}}
	dbMigration, err := sql.Open("pgx", dbURL)
	if err != nil {
		return err
	}
	err = ensureSchema(dbMigration)
	if err != nil { slog.Error("migration error", "error", err) }
	dbMigration.Close()
	{{else}}if err := ensureSchema(db); err != nil { 
		return fmt.Errorf("migration error: %w", err) 
	}{{end}}{{end}}

	mux := http.NewServeMux()
	registerHandlers(mux, db)
	server := &http.Server{
    	Addr: fmt.Sprintf(":%d", port),
    	Handler: h2c.NewHandler(mux, &http2.Server{}),
    	// Please, configure timeouts!
  	}

	done := make(chan os.Signal, 1)
	signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		sig := <-done
		slog.Warn("signal detected...", "signal", sig)
		ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
		defer cancel()
		server.Shutdown(ctx)
	}()
	slog.Info("Listening...", "port", port)
	return server.ListenAndServe()
}

func initLogger(dev bool) {
	var handler slog.Handler
	opts := slog.HandlerOptions{
		AddSource: true,
	}
	switch {
	case dev:
		handler = slog.NewTextHandler(os.Stderr, &opts)
	default:
		handler = slog.NewJSONHandler(os.Stderr, &opts)
	}

	logger := slog.New(handler)
	slog.SetDefault(logger)
}
