// Code generated by sqlc-connect (https://github.com/walterwanderley/sqlc-connect). DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log/slog"
	"net"

    "connectrpc.com/connect"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jackc/pgx/v5/pgxpool"
	"google.golang.org/protobuf/types/known/timestamppb"
	"google.golang.org/protobuf/types/known/wrapperspb"

	pb "{{ .GoModule}}/api/{{.Package}}/v1"
	"{{ .GoModule}}/api/{{.Package}}/v1/v1connect"
	"{{ .GoModule}}/internal/validation"
)
	
type Service struct {
    v1connect.Unimplemented{{ .Package | PascalCase}}ServiceHandler
	querier {{if .EmitInterface}}Querier{{else}}*Queries{{end}}
	{{if .EmitDbArgument}}db {{if eq .SqlPackage "database/sql"}}*sql.DB{{else}}*pgxpool.Pool{{end}}{{end}}
}

{{$emitDbArgument := .EmitDbArgument}}
{{ range .Services }}
func (s *Service) {{.Name}}(ctx context.Context, req *connect.Request[pb.{{.Name}}Request]) (*connect.Response[pb.{{.Name}}Response], error) {
	{{ range . | Input}}{{ .}}
	{{end}}
	{{if not .EmptyOutput}}result, {{end}}err := s.querier.{{ .Name}}(ctx{{if $emitDbArgument}}, s.db{{end}}{{ .ParamsCallDatabase}})
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "{{.Name}}")			
		return nil, err
	}
	{{ range . | Output}}{{ .}}
	{{end -}}
}
{{ end }}
