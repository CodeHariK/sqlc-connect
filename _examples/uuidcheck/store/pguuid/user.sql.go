// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package pguuid

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getProductsByIds = `-- name: GetProductsByIds :many







SELECT id, category, name FROM products WHERE id = ANY($1::uuid[])
`

// -- name: CreateUser :one
// INSERT INTO users (id, location) VALUES ($1, $2) RETURNING id;
// -- name: CreateUserReturnPartial :one
// INSERT INTO users (id, location) VALUES ($1, $2) RETURNING id, name;
// -- name: CreateUserReturnAll :one
// INSERT INTO users (id, location) VALUES ($1, $2) RETURNING *;
// -----------
// -- name: CreateProduct :one
// INSERT INTO products (id, category) VALUES ($1, $2) RETURNING id;
// -- name: CreateProductReturnPartial :one
// INSERT INTO
//
//	products (id, category)
//
// VALUES ($1, $2) RETURNING id,
//
//	name;
//
// -- name: CreateProductReturnAll :one
// INSERT INTO products (id, category) VALUES ($1, $2) RETURNING *;
func (q *Queries) GetProductsByIds(ctx context.Context, dollar_1 []pgtype.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(&i.ID, &i.Category, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
