// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pguuid/v1/pguuid.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "uuidcheck/api/pguuid/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PguuidServiceName is the fully-qualified name of the PguuidService service.
	PguuidServiceName = "pguuid.v1.PguuidService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PguuidServiceGetProductsByIdsProcedure is the fully-qualified name of the PguuidService's
	// GetProductsByIds RPC.
	PguuidServiceGetProductsByIdsProcedure = "/pguuid.v1.PguuidService/GetProductsByIds"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	pguuidServiceServiceDescriptor                = v1.File_pguuid_v1_pguuid_proto.Services().ByName("PguuidService")
	pguuidServiceGetProductsByIdsMethodDescriptor = pguuidServiceServiceDescriptor.Methods().ByName("GetProductsByIds")
)

// PguuidServiceClient is a client for the pguuid.v1.PguuidService service.
type PguuidServiceClient interface {
	GetProductsByIds(context.Context, *connect.Request[v1.GetProductsByIdsRequest]) (*connect.Response[v1.GetProductsByIdsResponse], error)
}

// NewPguuidServiceClient constructs a client for the pguuid.v1.PguuidService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPguuidServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PguuidServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pguuidServiceClient{
		getProductsByIds: connect.NewClient[v1.GetProductsByIdsRequest, v1.GetProductsByIdsResponse](
			httpClient,
			baseURL+PguuidServiceGetProductsByIdsProcedure,
			connect.WithSchema(pguuidServiceGetProductsByIdsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// pguuidServiceClient implements PguuidServiceClient.
type pguuidServiceClient struct {
	getProductsByIds *connect.Client[v1.GetProductsByIdsRequest, v1.GetProductsByIdsResponse]
}

// GetProductsByIds calls pguuid.v1.PguuidService.GetProductsByIds.
func (c *pguuidServiceClient) GetProductsByIds(ctx context.Context, req *connect.Request[v1.GetProductsByIdsRequest]) (*connect.Response[v1.GetProductsByIdsResponse], error) {
	return c.getProductsByIds.CallUnary(ctx, req)
}

// PguuidServiceHandler is an implementation of the pguuid.v1.PguuidService service.
type PguuidServiceHandler interface {
	GetProductsByIds(context.Context, *connect.Request[v1.GetProductsByIdsRequest]) (*connect.Response[v1.GetProductsByIdsResponse], error)
}

// NewPguuidServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPguuidServiceHandler(svc PguuidServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pguuidServiceGetProductsByIdsHandler := connect.NewUnaryHandler(
		PguuidServiceGetProductsByIdsProcedure,
		svc.GetProductsByIds,
		connect.WithSchema(pguuidServiceGetProductsByIdsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pguuid.v1.PguuidService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PguuidServiceGetProductsByIdsProcedure:
			pguuidServiceGetProductsByIdsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPguuidServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPguuidServiceHandler struct{}

func (UnimplementedPguuidServiceHandler) GetProductsByIds(context.Context, *connect.Request[v1.GetProductsByIdsRequest]) (*connect.Response[v1.GetProductsByIdsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pguuid.v1.PguuidService.GetProductsByIds is not implemented"))
}
