// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authors/v1/authors.proto

package v1connect

import (
	v1 "authors/api/authors/v1"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthorsServiceName is the fully-qualified name of the AuthorsService service.
	AuthorsServiceName = "authors.v1.AuthorsService"
)

// AuthorsServiceClient is a client for the authors.v1.AuthorsService service.
type AuthorsServiceClient interface {
	CreateAuthor(context.Context, *connect_go.Request[v1.CreateAuthorRequest]) (*connect_go.Response[v1.CreateAuthorResponse], error)
	DeleteAuthor(context.Context, *connect_go.Request[v1.DeleteAuthorRequest]) (*connect_go.Response[v1.DeleteAuthorResponse], error)
	GetAuthor(context.Context, *connect_go.Request[v1.GetAuthorRequest]) (*connect_go.Response[v1.GetAuthorResponse], error)
	ListAuthors(context.Context, *connect_go.Request[v1.ListAuthorsRequest]) (*connect_go.Response[v1.ListAuthorsResponse], error)
}

// NewAuthorsServiceClient constructs a client for the authors.v1.AuthorsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthorsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthorsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authorsServiceClient{
		createAuthor: connect_go.NewClient[v1.CreateAuthorRequest, v1.CreateAuthorResponse](
			httpClient,
			baseURL+"/authors.v1.AuthorsService/CreateAuthor",
			opts...,
		),
		deleteAuthor: connect_go.NewClient[v1.DeleteAuthorRequest, v1.DeleteAuthorResponse](
			httpClient,
			baseURL+"/authors.v1.AuthorsService/DeleteAuthor",
			opts...,
		),
		getAuthor: connect_go.NewClient[v1.GetAuthorRequest, v1.GetAuthorResponse](
			httpClient,
			baseURL+"/authors.v1.AuthorsService/GetAuthor",
			opts...,
		),
		listAuthors: connect_go.NewClient[v1.ListAuthorsRequest, v1.ListAuthorsResponse](
			httpClient,
			baseURL+"/authors.v1.AuthorsService/ListAuthors",
			opts...,
		),
	}
}

// authorsServiceClient implements AuthorsServiceClient.
type authorsServiceClient struct {
	createAuthor *connect_go.Client[v1.CreateAuthorRequest, v1.CreateAuthorResponse]
	deleteAuthor *connect_go.Client[v1.DeleteAuthorRequest, v1.DeleteAuthorResponse]
	getAuthor    *connect_go.Client[v1.GetAuthorRequest, v1.GetAuthorResponse]
	listAuthors  *connect_go.Client[v1.ListAuthorsRequest, v1.ListAuthorsResponse]
}

// CreateAuthor calls authors.v1.AuthorsService.CreateAuthor.
func (c *authorsServiceClient) CreateAuthor(ctx context.Context, req *connect_go.Request[v1.CreateAuthorRequest]) (*connect_go.Response[v1.CreateAuthorResponse], error) {
	return c.createAuthor.CallUnary(ctx, req)
}

// DeleteAuthor calls authors.v1.AuthorsService.DeleteAuthor.
func (c *authorsServiceClient) DeleteAuthor(ctx context.Context, req *connect_go.Request[v1.DeleteAuthorRequest]) (*connect_go.Response[v1.DeleteAuthorResponse], error) {
	return c.deleteAuthor.CallUnary(ctx, req)
}

// GetAuthor calls authors.v1.AuthorsService.GetAuthor.
func (c *authorsServiceClient) GetAuthor(ctx context.Context, req *connect_go.Request[v1.GetAuthorRequest]) (*connect_go.Response[v1.GetAuthorResponse], error) {
	return c.getAuthor.CallUnary(ctx, req)
}

// ListAuthors calls authors.v1.AuthorsService.ListAuthors.
func (c *authorsServiceClient) ListAuthors(ctx context.Context, req *connect_go.Request[v1.ListAuthorsRequest]) (*connect_go.Response[v1.ListAuthorsResponse], error) {
	return c.listAuthors.CallUnary(ctx, req)
}

// AuthorsServiceHandler is an implementation of the authors.v1.AuthorsService service.
type AuthorsServiceHandler interface {
	CreateAuthor(context.Context, *connect_go.Request[v1.CreateAuthorRequest]) (*connect_go.Response[v1.CreateAuthorResponse], error)
	DeleteAuthor(context.Context, *connect_go.Request[v1.DeleteAuthorRequest]) (*connect_go.Response[v1.DeleteAuthorResponse], error)
	GetAuthor(context.Context, *connect_go.Request[v1.GetAuthorRequest]) (*connect_go.Response[v1.GetAuthorResponse], error)
	ListAuthors(context.Context, *connect_go.Request[v1.ListAuthorsRequest]) (*connect_go.Response[v1.ListAuthorsResponse], error)
}

// NewAuthorsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthorsServiceHandler(svc AuthorsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/authors.v1.AuthorsService/CreateAuthor", connect_go.NewUnaryHandler(
		"/authors.v1.AuthorsService/CreateAuthor",
		svc.CreateAuthor,
		opts...,
	))
	mux.Handle("/authors.v1.AuthorsService/DeleteAuthor", connect_go.NewUnaryHandler(
		"/authors.v1.AuthorsService/DeleteAuthor",
		svc.DeleteAuthor,
		opts...,
	))
	mux.Handle("/authors.v1.AuthorsService/GetAuthor", connect_go.NewUnaryHandler(
		"/authors.v1.AuthorsService/GetAuthor",
		svc.GetAuthor,
		opts...,
	))
	mux.Handle("/authors.v1.AuthorsService/ListAuthors", connect_go.NewUnaryHandler(
		"/authors.v1.AuthorsService/ListAuthors",
		svc.ListAuthors,
		opts...,
	))
	return "/authors.v1.AuthorsService/", mux
}

// UnimplementedAuthorsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthorsServiceHandler struct{}

func (UnimplementedAuthorsServiceHandler) CreateAuthor(context.Context, *connect_go.Request[v1.CreateAuthorRequest]) (*connect_go.Response[v1.CreateAuthorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authors.v1.AuthorsService.CreateAuthor is not implemented"))
}

func (UnimplementedAuthorsServiceHandler) DeleteAuthor(context.Context, *connect_go.Request[v1.DeleteAuthorRequest]) (*connect_go.Response[v1.DeleteAuthorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authors.v1.AuthorsService.DeleteAuthor is not implemented"))
}

func (UnimplementedAuthorsServiceHandler) GetAuthor(context.Context, *connect_go.Request[v1.GetAuthorRequest]) (*connect_go.Response[v1.GetAuthorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authors.v1.AuthorsService.GetAuthor is not implemented"))
}

func (UnimplementedAuthorsServiceHandler) ListAuthors(context.Context, *connect_go.Request[v1.ListAuthorsRequest]) (*connect_go.Response[v1.ListAuthorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authors.v1.AuthorsService.ListAuthors is not implemented"))
}
